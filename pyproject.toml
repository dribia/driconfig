[project]
name = "driconfig"
version = "1.1.0"
description = "Pydantic-ish YAML configuration management."
authors = [{ name = "Dribia Data Research", email = "code@dribia.com" }]
requires-python = ">=3.9,<4.0"
readme = "README.md"
license = "MIT"
maintainers = [{ name = "Dribia Data Research", email = "code@dribia.com" }]
dependencies = [
    "pyyaml~=6.0",
    "pydantic-settings>=2.0.1,<3",
]

[project.urls]
Homepage = "https://dribia.github.io/driconfig"
Repository = "https://github.com/dribia/driconfig"
Documentation = "https://dribia.github.io/driconfig"

[dependency-groups]
dev = [
    "pre-commit>=4.2.0,<5",
]
ci = [
    "setuptools>=80.9.0,<81",
]
lint = [
    "ruff==0.11.13",
    "mypy==1.16.0",
    "types-pyyaml>=6.0.12,<7",
]
test = [
    "pytest>=7.2.2,<9.0.0",
    "pytest-mock>=3.14.1,<4",
    "pytest-cov>=6.2.1,<7",
]
docs = [
    "mkdocs>=1.4.2,<2",
    "mkdocs-material>=9.6.14,<10",
    "mike>=2.1.3,<3",
]

[tool.uv]
required-version = ">=0.7.13,<1.0"
default-groups = [
    "dev",
    "ci",
    "lint",
    "test",
    "docs",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # convention
    "B",  # flake8-bugbear
    "D",  # pydocstyle
    "UP",  # pyupgrade
    "N",  # pep8-naming
    "NPY",  # numpy
    "PD",   # pandas
    "RUF",  # ruff
    "PTH",  # pathlib
    "SIM",  # simplify
    "RET",  # return
    "RSE",  # raise
    "Q",  # quotes
    "G",  # logging-format
    "LOG",  # logging
    "ISC",  # implicit str concat
    "C4",  # comprehensions
    "COM",  # commas
    "TD",  # to-do
    "INT",  # gettext
    "TRY",  # tryceratops
    "TID",  # tidy imports
]
ignore = [
    "C901",  # function is too complex
    "N805",  # allow naming `self` to first class argument
    "RUF013",  # implicit optional
    "ISC001",  # allow implicit str concat
    "COM812",  # allow missing trailing comma
    "TRY003",  # allow long messages outside the exception class
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
plugins = ["pydantic.mypy"]
strict_optional = false
ignore_missing_imports = true
